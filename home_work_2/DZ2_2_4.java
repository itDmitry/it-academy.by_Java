/*
2.4 Задачи взяты с сайта https://taskcode.ru/array.
На сайте есть пояснения по каждой из этих задач. Все задачи в одном классе, в отдельных методах.
2.4.1 Сумма четных положительных элементов массива
2.4.2 Максимальный из элементов массива с четными индексами
2.4.3 Элементы массива, которые меньше среднего арифметического
2.4.4 Найти два наименьших (минимальных) элемента массива
2.4.5 Сжать массив, удалив элементы, принадлежащие интервалу
2.4.6 Сумма цифр массива
*/
package home_work_2;

import java.util.Arrays;
import java.util.Scanner;

public class DZ2_2_4 {
    public static void main(String[] args) {
        int[] container = arrayFromConsole();
        System.out.println("Получился массив " + Arrays.toString(container));

        System.out.println("Сумма четных положительных элементов массива = " + sumOfEvenPositiveElements(container));
        System.out.println("Максимальный из элементов массива с четными индексами = " +
                maxOfMassiveElementsWithEvenIndex(container));
        System.out.println("Список элементов массива, которые меньше среднего арифметического:" +
                isLesserThanAverage(container));
    }

    public static int[] arrayFromConsole(){
        Scanner console = new Scanner (System.in);
        System.out.println("Голосуйте за размер массива");

        int [] array = new int[console.nextInt()];

        System.out.println("Голосуйте за элементы массива");
        for (int i = 0; i < array.length; i++) {
            try {
                System.out.println("Голосуйте за элемент номер " + i + ", а если надоело, то напишите любую букву");
                array[i] = console.nextInt();
            } catch (java.util.InputMismatchException e){
                break;
            }
        }

        console.close();

        return array;
    }
/*
Сумма четных положительных элементов массива
В массиве, содержащем положительные и отрицательные целые числа, вычислить сумму четных положительных элементов.
В цикле проверяем каждый элемент массива на четность и положительность.
Данные условия можно скомбинировать через логическое "И" в заголовке одного условного оператора
или использовать два (один вложен в другой) отдельных каждый со своим условием.
Если элемент массива удовлетворяет обоим условиям, то его значение добавляется к переменной, в которой хранится сумма.
После цикла ее значение выводится на экран.
Ноль является четным числом, однако он не относится к положительным.
Поэтому проверка на положительность - это "больше 0", а не "больше или равно 0".
Хотя это не столь важно, так как добавление нуля к сумме ничего не меняет.
Проверку на четность можно выполнить с помощью нахождения остатка от деления на 2.
Если остаток равен нулю, то число четное. В ряде языков есть специальные функции, проверяющие четное число или нечетное.
 */
    public static long sumOfEvenPositiveElements (int[] array){
        long sum = 0;
        for (int i = 0; i < array.length; i++) {
            if (array[i] > 0 && array[i] % 2 == 0){
                sum += array[i];
            }
        }

        return sum;
    }
/*
Максимальный из элементов массива с четными индексами
В массиве найти максимальный элемент с четным индексом.
Другая формулировка задачи: среди элементов массива с четными индексами, найти тот, который имеет максимальное значение.
В различных языках программирования индексация элементов выполняется по-разному.
В одних первый элемент имеет индекс 1 (например, в Паскале и КуМире), в других - 0 (Python, C, Basic).
Таким образом, в одних языках элементами с четными индексами будут второй, четвертый, шестой и т. д.
В других языках четные индексы будут у первого, третьего, пятого и т. д. элементов.
Для поиска максимума только среди четных (или среди нечетных) индексов
необходимо при переборе массива в цикле использовать шаг, равный 2.
Предположим, что первый элемент с четным индексом и есть максимальный. Присвоим его индекс переменной max.
Перебор начнем с индекса i = max + 2 до конца массива (N).
В цикле будем сравнивать значение очередного элемента со значением элемента по индексу max.
Если текущий элемент больше, то запишем его индекс в max.
*/
    public static int maxOfMassiveElementsWithEvenIndex (int[] array){
        int max = Integer.MIN_VALUE;
        for (int i = 0; i < array.length; i += 2) {
            if (array[i] > max){
                max = array[i];
            }
        }

        return max;
    }
/*
Элементы массива, которые меньше среднего арифметического
Найти в массиве те элементы, значение которых меньше среднего арифметического, взятого от всех элементов массива.
Алгоритм решения задачи:
Посчитать сумму всех элементов массива. Для этого до цикла вводится переменная для суммы (например, sum).
Далее в цикле перебираются элементы массива и значение каждого добавляется к этой переменной.
Подсчет суммы можно выполнить в том же цикле, что и заполнение массива.
Когда сумма элементов посчитана, находится среднее арифметическое,
которое равно сумме разделенной на количество элементов массива.
Массив перебирается в цикле, каждый элемент сравнивается с найденным средним значением.
Если элемент меньше, то он выводится на экран (или сохраняется в другом массиве).
 */
    public static String isLesserThanAverage (int[] array){
        String answer = "";
        long sum = 0;
        double average;

        for (int i = 0; i < array.length; i++) {
            sum += array[i];
        }

        average = sum / array.length;

        for (int i = 0; i < array.length; i++) {
            if (array[i] < average){
                answer = answer + " " + array[i] + ",";
            }
        }

        return answer;
    }
}
